---
- debug:
    msg="START netconf_rpc sros/basic.yaml on connection={{ ansible_connection
    }}"

- name: lock candidate (content is dict)
  register: result
  connection: ansible.netcommon.netconf
  ansible.netcommon.netconf_rpc:
    rpc: lock
    content:
      target:
        candidate:

- name: discard changes (w/o content)
  register: result
  connection: ansible.netcommon.netconf
  ansible.netcommon.netconf_rpc:
    rpc: discard-changes
    display: xml

- name: unlock candidate (content is dict as json)
  register: result
  connection: ansible.netcommon.netconf
  ansible.netcommon.netconf_rpc:
    rpc: unlock
    xmlns: urn:ietf:params:xml:ns:netconf:base:1.0
    content: "{'target': {'candidate': None}}"
    display: json

- assert:
    that:
      - "{{ result['output']['rpc-reply'] is defined}}"
      - "{{ result['output']['rpc-reply']['ok'] is defined}}"

- name: validate candidate (content is single line of XML)
  register: result
  connection: ansible.netcommon.netconf
  ansible.netcommon.netconf_rpc:
    rpc: validate
    content: <source><candidate/></source>
    display: json

- assert:
    that:
      - "{{ result['output']['rpc-reply'] is defined}}"
      - "{{ result['output']['rpc-reply']['ok'] is defined}}"

- name: copy running to startup
  register: result
  connection: ansible.netcommon.netconf
  ansible.netcommon.netconf_rpc:
    rpc: copy-config
    content:
      source:
        running:
      target:
        startup:

- name: get schema list (content is multiple lines of XML)
  register: result
  connection: ansible.netcommon.netconf
  ansible.netcommon.netconf_rpc:
    rpc: get
    content:
      "<filter>\n  <netconf-state xmlns=\"urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring\"\
      >\n    <schemas/>\n  </netconf-state>\n</filter>\n"
    display: json

- assert:
    that:
      - "{{ result['output']['data'] is defined}}"
      - "{{ result['output']['data']['netconf-state'] is defined}}"
      - "{{ result['output']['data']['netconf-state']['schemas'] is defined}}"
      - "{{ result['output']['data']['netconf-state']['schemas']['schema'] is defined}}"

- name: Failure scenario, unsupported content (xpath value)
  register: result
  connection: ansible.netcommon.netconf
  ignore_errors: true
  ansible.netcommon.netconf_rpc:
    rpc: get
    content: schemas/schema[identifier=ietf-netconf-monitoring]

- assert:
    that:
      - "'unsupported content value' in result.msg"

- name: Failure scenario, unsupported content type (list)
  register: result
  connection: ansible.netcommon.netconf
  ignore_errors: true
  ansible.netcommon.netconf_rpc:
    rpc: get
    content:
      - value1
      - value2

- assert:
    that:
      - "'unsupported content data-type' in result.msg"

- name: Failure scenario, RPC is close-session
  register: result
  connection: ansible.netcommon.netconf
  ignore_errors: true
  ansible.netcommon.netconf_rpc:
    rpc: close-session

- assert:
    that:
      - "'unsupported operation' in result.msg"

- name: Failure scenario, attribute rpc missing
  register: result
  connection: ansible.netcommon.netconf
  ignore_errors: true
  ansible.netcommon.netconf_rpc:
    display: json

- assert:
    that:
      - "'missing required arguments' in result.msg"

- name: Failure scenario, attribute rpc is None
  register: result
  connection: ansible.netcommon.netconf
  ignore_errors: true
  ansible.netcommon.netconf_rpc:
    rpc:
    display: json

- assert:
    that:
      - "'must not be None' in result.msg"

- name: Failure scenario, attribute rpc is zero-length string
  register: result
  connection: ansible.netcommon.netconf
  ignore_errors: true
  ansible.netcommon.netconf_rpc:
    rpc: ""
    display: json

- assert:
    that:
      - "'must not be empty' in result.msg"

- name: Failure scenario, attribute rpc only contains white-spaces
  register: result
  connection: ansible.netcommon.netconf
  ignore_errors: true
  ansible.netcommon.netconf_rpc:
    rpc: "   "
    display: json

- assert:
    that:
      - "'must not be empty' in result.msg"

- debug:
    msg="END netconf_rpc sros/basic.yaml on connection={{ ansible_connection
    }}"
