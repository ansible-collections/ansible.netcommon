---
- debug: msg="START netconf_get iosxr/basic.yaml on connection={{ ansible_connection
    }}"

- name: setup interface
  connection: ansible.netcommon.network_cli
  cisco.iosxr.iosxr_config:
    commands:
      - description this is test interface Loopback999
      - no shutdown
    parents:
      - interface Loopback999
    match: none

- name: get running interface confiugration with filter
  register: result
  connection: ansible.netcommon.netconf
  ansible.netcommon.netconf_get:
    source: running
    filter: <interface-configurations xmlns="http://cisco.com/ns/yang/Cisco-IOS-XR-ifmgr-cfg"></interface-configurations>

- assert:
    that:
      - "'<description>this is test interface Loopback999</description>' in result.stdout"
      - "'<usernames>' not in result.stdout"

- name: test lock=never, get-config, running interface confiugration with filter
    without lock
  register: result
  connection: ansible.netcommon.netconf
  ansible.netcommon.netconf_get:
    source: running
    lock: never
    filter: <interface-configurations xmlns="http://cisco.com/ns/yang/Cisco-IOS-XR-ifmgr-cfg"></interface-configurations>

- assert:
    that:
      - "'<description>this is test interface Loopback999</description>' in result.stdout"
      - "'<usernames>' not in result.stdout"

- name: test lock=if-supported, get-config, running interface confiugration with
    filter without lock
  register: result
  connection: ansible.netcommon.netconf
  ansible.netcommon.netconf_get:
    source: running
    lock: if-supported
    filter: <interface-configurations xmlns="http://cisco.com/ns/yang/Cisco-IOS-XR-ifmgr-cfg"></interface-configurations>

- assert:
    that:
      - "'<description>this is test interface Loopback999</description>' in result.stdout"
      - "'<usernames>' not in result.stdout"

- name: Failure scenario, get-config information with lock
  register: result
  ignore_errors: true
  connection: ansible.netcommon.netconf
  ansible.netcommon.netconf_get:
    source: running
    lock: always

- assert:
    that:
      - "'<bad-element>running</bad-element>' in result.msg"

- name: Failure scenario, fetch config from startup
  register: result
  ignore_errors: true
  connection: ansible.netcommon.netconf
  ansible.netcommon.netconf_get:
    source: startup

- assert:
    that:
      - "'startup source is not supported' in result.msg"

- name: test get, information from running datastore without lock
  register: result
  connection: ansible.netcommon.netconf
  ansible.netcommon.netconf_get:
    lock: never
    filter: <interface-configurations xmlns="http://cisco.com/ns/yang/Cisco-IOS-XR-ifmgr-cfg"></interface-configurations>

- assert:
    that:
      - "'<description>this is test interface Loopback999</description>' in result.stdout"

- name: test get, information from running datastore with lock if supported
  register: result
  connection: ansible.netcommon.netconf
  ansible.netcommon.netconf_get:
    lock: if-supported
    filter: <interface-configurations xmlns="http://cisco.com/ns/yang/Cisco-IOS-XR-ifmgr-cfg"></interface-configurations>

- assert:
    that:
      - "'<description>this is test interface Loopback999</description>' in result.stdout"

- name: Failure scenario, get information from running with lock
  register: result
  ignore_errors: true
  connection: ansible.netcommon.netconf
  ansible.netcommon.netconf_get:
    lock: always

- assert:
    that:
      - "'<bad-element>running</bad-element>' in result.msg"

- name: get configuration and state data in json format
  register: result
  connection: ansible.netcommon.netconf
  ansible.netcommon.netconf_get:
    source: running
    display: json

- assert:
    that:
      - "{{ result['output']['data']['aaa'] is defined}}"

- name: get configuration data in xml pretty format
  register: result
  connection: ansible.netcommon.netconf
  ansible.netcommon.netconf_get:
    source: running
    display: pretty

- assert:
    that:
      - "{{ result['output'] is defined}}"

- name: get configuration data in xml with namespace stripped
  register: result
  connection: ansible.netcommon.netconf
  ansible.netcommon.netconf_get:
    source: running
    display: xml

- assert:
    that:
      - "{{ result['output'] is defined}}"
      - "{{ 'xmlns' not in result.output }}"

- name: Failure scenario, unsupported filter
  register: result
  ignore_errors: true
  connection: ansible.netcommon.netconf
  ansible.netcommon.netconf_get:
    filter: configuration/state

- assert:
    that:
      - "'filter value \\'configuration/state\\' of type xpath is not supported'\
        \ in result.msg"

- name: "get configuration with json filter and native output (using xmltodict)"
  connection: ansible.netcommon.netconf
  ansible.netcommon.netconf_get:
    filter: |
              {
                  "interface-configurations": {
                      "@xmlns": "http://cisco.com/ns/yang/Cisco-IOS-XR-ifmgr-cfg",
                      "interface-configuration": null
                  }
              }
    display: native
  register: result

- assert:
    that:
      - "{{ result['output']['data'] is defined}}"
      - "{{ result['output']['data']['@xmlns'] == 'urn:ietf:params:xml:ns:netconf:base:1.0' }}"
      - "{{ result['output']['data']['@xmlns:nc'] == 'urn:ietf:params:xml:ns:netconf:base:1.0' }}"
      - "{{ result['output']['data']['interface-configurations']['interface-configuration'] is defined }}"

- name: Define the interface filter
  set_fact:
    filter:
      interface-configurations:
        "@xmlns": "http://cisco.com/ns/yang/Cisco-IOS-XR-ifmgr-cfg"
        interface-configuration: null

- name: "get configuration with native filter type using set_facts"
  connection: ansible.netcommon.netconf
  ansible.netcommon.netconf_get:
    filter: "{{ filter }}"
    display: native
  register: result

- assert:
    that:
      - "{{ result['output']['data'] is defined}}"
      - "{{ result['output']['data']['@xmlns'] == 'urn:ietf:params:xml:ns:netconf:base:1.0' }}"
      - "{{ result['output']['data']['@xmlns:nc'] == 'urn:ietf:params:xml:ns:netconf:base:1.0' }}"
      - "{{ result['output']['data']['interface-configurations']['interface-configuration'] is defined }}"

- name: "get configuration with direct native filter type"
  connection: ansible.netcommon.netconf
  ansible.netcommon.netconf_get:
    filter: {
      "interface-configurations": {
        "@xmlns": "http://cisco.com/ns/yang/Cisco-IOS-XR-ifmgr-cfg",
        "interface-configuration": null
      }
    }
    display: native
  register: result

- assert:
    that:
      - "{{ result['output']['data'] is defined}}"
      - "{{ result['output']['data']['@xmlns'] == 'urn:ietf:params:xml:ns:netconf:base:1.0' }}"
      - "{{ result['output']['data']['@xmlns:nc'] == 'urn:ietf:params:xml:ns:netconf:base:1.0' }}"
      - "{{ result['output']['data']['interface-configurations']['interface-configuration'] is defined }}"

- name: setup - teardown
  connection: ansible.netcommon.network_cli
  cisco.iosxr.iosxr_config:
    commands:
      - no description
      - shutdown
    parents:
      - interface Loopback999
    match: none

- debug: msg="END netconf_get iosxr/basic.yaml on connection={{ ansible_connection
    }}"
