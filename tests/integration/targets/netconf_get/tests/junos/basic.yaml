---
- debug:
    msg="START netconf_get junos/basic.yaml on connection={{ ansible_connection
    }}"

- name: Configure syslog file - setup
  register: result
  junipernetworks.junos.junos_config:
    lines:
      - set system syslog file test1 any any

- name: Get system configuration data from running datastore state
  register: result
  ansible.netcommon.netconf_get:
    source: running
    filter: <configuration><system><syslog></syslog></system></configuration>

- assert:
    that:
      - "'<name>test1</name>' in result.stdout"
      - "'<name>any</name>' in result.stdout"
      - "'<any/>' in result.stdout"
      - "'<login>' not in result.stdout"
      - "'<interface>' not in result.stdout"

- name: Failure scenario, fetch config from startup
  register: result
  ignore_errors: true
  ansible.netcommon.netconf_get:
    source: startup

- assert:
    that:
      - "'startup source is not supported' in result.msg"

- name: Failure scenario, fetch config from running with lock
  register: result
  ignore_errors: true
  ansible.netcommon.netconf_get:
    lock: always
    source: running

- assert:
    that:
      - "'syntax error' in result.msg"

- name: Get system configuration data from running datastore state and lock if-supported
  register: result
  ansible.netcommon.netconf_get:
    source: running
    filter: <configuration><system><syslog></syslog></system></configuration>
    lock: if-supported

- assert:
    that:
      - "'<name>test1</name>' in result.stdout"
      - "'<name>any</name>' in result.stdout"
      - "'<any/>' in result.stdout"
      - "'<login>' not in result.stdout"
      - "'<interface>' not in result.stdout"

- name: get configuration and state data in json format
  register: result
  ansible.netcommon.netconf_get:
    source: running
    display: json

- assert:
    that:
      - "{{ result['output']['rpc-reply']['data']['configuration'] is defined}}"

- name: get configuration and state data in xml pretty format
  register: result
  ansible.netcommon.netconf_get:
    source: running
    display: pretty

- assert:
    that:
      - "{{ result['output'] is defined}}"

- name: get configuration data in xml with namespace stripped
  register: result
  ansible.netcommon.netconf_get:
    source: running
    display: xml

- assert:
    that:
      - "{{ result['output'] is defined}}"
      - "{{ 'xmlns' not in result.output }}"

- name: get configuration and state data without datastore lock
  register: result
  ansible.netcommon.netconf_get:
    lock: never

- assert:
    that:
      - "'<database-status-information>' in result.stdout"
      - "'</configuration>' in result.stdout"

- name: get configuration and state data and lock data-store if supported
  register: result
  ansible.netcommon.netconf_get:
    lock: if-supported

- assert:
    that:
      - "'<database-status-information>' in result.stdout"
      - "'</configuration>' in result.stdout"

- name: Failure scenario, unsupported filter
  register: result
  ignore_errors: true
  ansible.netcommon.netconf_get:
    filter: configuration/state

- assert:
    that:
      - "'filter value \\'configuration/state\\' of type xpath is not supported'\
        \ in result.msg"

- name: Configure syslog file - teardown
  junipernetworks.junos.junos_config:
    lines:
      - delete system syslog file test1 any any

- debug:
    msg="END netconf_get junos/basic.yaml on connection={{ ansible_connection
    }}"
